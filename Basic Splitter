;; Input trees
(def my-list '(1 (-2 dog 17 (4) cat) -8 (rat -6 13) mango))
(def my-list2 '(4 5 (dog cat (6 (hello) 9) mango spam (rat))10 11))
(def my-list3 '( 9 ((3 5 dog rat (hello 7 8 9 )) spam) cat))

;; Takes a sequence as an input and flattens it first
;; Then the list is grouped into numbers if true and symbols if false
;; Destructuring is used to assign true and false to numbers and symbols
;; The list for numbers and symbols is then converted to a map for output, with the keys :numbers and :symbols
(defn split [lis]
  (let [{numbers true symbols false} (group-by number? (flatten lis))]
  (assoc {} :numbers numbers :symbols symbols)))
